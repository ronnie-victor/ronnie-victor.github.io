<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript常用简写技巧]]></title>
    <url>%2F2018%2F11%2F06%2Fjavascript%E5%B8%B8%E7%94%A8%E7%AE%80%E5%86%99%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[1、三目运算符原代码：1234567const x = 20;let answer;if (x &gt; 10) &#123; answer = 'greater than 10';&#125; else &#123; answer = 'less than 10';&#125; 简写代码：1let answer = x &gt; 10 ? 'greater than 10' : 'less than 10'; 2、循环语句原代码：1for (let i = 0;i &lt; allImgs.length; i ++) 简写代码：1for (let index of allImgs) 遍历数组forEach简写示例：1234let logArrayElements = (element, index, array) =&gt; &#123; console.log(`a[$&#123;index&#125;] = $&#123;element&#125;`);&#125;[2, 3, 4].forEach(logArrayElements); 3、声明变量 在函数开始前，对变量赋值是一种好的习惯。声明多个变量时：123let x;let y;let z = 1; 简写代码：1let x, y, z = 3; 4、if语句 使用if进行基本判断时，可以省略赋值运算符1if (like === true) 简写代码：1if (like) 5、十进制数 可以用科学计数法来替代较大的数值，将10000000简写为1e7：1for (let i = 0; i &lt; 10000000; i++) 简写代码：1for (let i = 0; i &lt; 1e7; i++) 6、多行字符串原代码：1alert("你好，\n 我叫\n Olive"); 简写代码：123alert(`你好我叫olive`); 7、变量赋值 将变量值赋给另外一个变量，首先要判断原值不是null、未定义或者空值原代码：123if (variable1 !== null || variable1 !== underfined || variable1 !== '')&#123; let variable2 = variable1;&#125; 简写代码：1const variable2 = variable1 || 'new'; 测试代码：123456let variable1;let variable2 = variable1 || '';console.log(variable2 === ''); // prints truevariable1 = 'foo';variable2 = variable1 || '';console.log(variable2); // prints foo 8、默认值赋值 如果预期参数是null或者undefined，可以使用简短的逻辑运算符；原代码：123456let dbHost;if (process.env.DB_HOST) &#123; dbHost = process.env.DB_HOST;&#125; else &#123; dbHost = 'localhost';&#125; 简写代码：1let dbHost = process.env.DB_HOST || 'localhost'; 9、对象属性 ES6提供了简单方法分配对象属性。如果属性名与key名相同，可使用简写原代码：1const obj = &#123;x: x, y: y&#125;; 简写代码：1const obj = &#123;x, y&#125;; 10、箭头函数 如果将原始函数嵌套在其它函数中进行调用时，函数会变得冗长混乱原代码：1234567891011function sayHello(name) &#123; console.log('Hello', name);&#125; setTimeout(function() &#123; console.log('Loaded');&#125;, 2000); list.forEach(function(item) &#123; console.log(item);&#125;); 简写代码：123sayHello = (name) =&gt; console.log('Hello', name);setTimeout( () =&gt; console.log('Loaded'), 2000);list.forEach( item =&gt; console.log(item)); 11、隐式返回值 返回值通常用来返回函数最终结果的关键字，只有一个语句的箭头函数，可以隐式返回结果。（函数必须省略{}，以便省略return关键字）原代码：123function calcCircumference(diameter) &#123; return Math.PI * diameter;&#125; 简写代码：123calcCircumference = diameter =&gt; ( Math.PI * diameter) 12、默认参数值 之前定义默认参数值都是使用if方式，ES6规定了可以在函数中定义参数默认值原代码：123456789function volume(l, w, h) &#123; if (w === undefined) &#123; w = 3; &#125; if (h === undefined) &#123; h = 4; &#125; return l * w * h;&#125; 简写代码：1234function volume(l, w = 3, h = 4) &#123; return l * w * h;&#125;volume(2) // output: 24 13、模板字符串 之前使用+将多个变量转换为字符串原代码：12const welcome = 'You have logged in as ' + first + ' ' + last + '.'const db = 'http://' + host + ':' + port + '/' + database; 简写代码：12const welcome = `You have logged in as $&#123;first&#125; $&#123;last&#125; . `const db = `http://$&#123;host&#125;:$&#123;port&#125;/$&#123;database&#125;`; 14、解构赋值 解构赋值时一种表达式，用于从数组或对象中快速提取属性值，并赋给定义的变量原代码：12345678const observable = require('mobx/observable');const action = require('mobx/action');const runInAction = require('mobx/runInAction');const store = this.props.store;const form = this.props.form;const loading = this.props.loading;const errors = this.props.errors;const entity = this.props.entity; 简写代码：12import &#123; observable, action, runInAction &#125; from 'mobx';const &#123; store, form, loading, errors, entity &#125; = this.props; 自定义变量名：1const &#123; store, form, loading, errors, entity:contact &#125; = this.props; 15、展开运算符 使用展开运算符可以替换某些数组函数原代码：123456//joining arraysconst old = [1, 2, 3];const nums = [4, 5, 6].concat(old);// cloning arraysconst arr = [1, 2, 3, 4, 5, 6];const arr2 = arr.slice(); 简写代码： 123456 //joining arraysconst old = [1, 2, 3];const nums = [4, 5, 6, ...old];// cloning arraysconst arr = [1, 2, 3, 4, 5, 6];const arr2 = [...arr]; 可以使用扩展运算符在任何一个数组中插入另一个数组 12const odd = [1, 3, 5 ];const nums = [2, ...odd, 4 , 6]; 可以将展开运算符和 ES6 解构符号结合使用 1234const &#123; a, b, ...z &#125; = &#123; a: 1, b: 2, c: 3, d: 4 &#125;;console.log(a) // 1console.log(b) // 2console.log(z) // &#123; c: 3, d: 4 &#125; 16、强制参数 默认情况下，如果不向函数参数传值，那么 JavaScript 会将函数参数设置为未定义。其它一些语言则会发出警告或错误。要执行参数分配，可以使用if语句抛出未定义的错误，或者可以利用“强制参数”原代码：123456function foo(bar) &#123; if(bar === undefined) &#123; throw new Error('Missing parameter!'); &#125; return bar;&#125; 简写代码：123456mandatory = () =&gt; &#123; throw new Error('Missing parameter!');&#125;foo = (bar = mandatory()) =&gt; &#123; return bar;&#125; 16、Array.find原代码：123456789101112const pets = [ &#123;type: 'Dog', name: 'Max'&#125;, &#123;type: 'Cat', name: 'Cat'&#125;, &#123;type: 'Dog', name: 'Tom'&#125;]function findDog(name) &#123; for(let i = 0; i &lt; pets.length; i++)&#123; if (pets[i].type === 'Dog' &amp;&amp; pets[i].name === name) &#123; return pets[i]; &#125; &#125;&#125; 简写代码：1pet = pets.find(pet =&gt; pet.type ==='Dog' &amp;&amp; pet.name === 'Tommy'); 17、Object [key] 通常将 foo.bar 写成 foo [‘bar’] 是一种常见的做法，这种做法构成了编写可重用代码的基础原代码： 12345678function validate(values) &#123; if(!values.first) return false; if(!values.last) return false; return true;&#125;console.log(validate(&#123;first:'Bruce',last:'Wayne'&#125;)); // true 上面的函数可以完成验证工作。但是当有很多表单，则需要应用验证，此时会有不同的字段和规则。可以构建一个在运行时配置的通用验证函数 1234567891011121314151617181920212223// object validation rulesconst schema = &#123; first: &#123; required:true &#125;, last: &#123; required:true &#125;&#125; // universal validation functionconst validate = (schema, values) =&gt; &#123; for(field in schema) &#123; if(schema[field].required) &#123; if(!values[field]) &#123; return false; &#125; &#125; &#125; return true;&#125;console.log(validate(schema, &#123;first:'Bruce'&#125;)); // falseconsole.log(validate(schema, &#123;first:'Bruce',last:'Wayne'&#125;)); // true 后续补充。。。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS Grid快速入门]]></title>
    <url>%2F2018%2F10%2F30%2FCSS%20Grid%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Grid布局是网站设计的基础，CSS Grid是创建网格布局强大和简单的工具 CSS Grid已获得主流浏览器(Safari, Firefox, Chrome, Edge)的原生支持Grid布局CSS Grid布局由两个核心部分组成：wrapper(Parent Element)和item(Child Element)html示例：12345678&lt;div class="wrapper"&gt;&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;&lt;div&gt;4&lt;/div&gt;&lt;div&gt;5&lt;/div&gt;&lt;div&gt;6&lt;/div&gt;&lt;/div&gt; css示例： 要将wrapper元素变为grid，只需要display: grid;即可123.wrapper&#123;display: grid;&#125; 由于还未进行任何操作，它会将六个div堆叠在一起： Columns 和 Rows 要使其成为二维的grid容器，需要设置列和行的属性，需要使用到grid-template-column和grid-template-row示例：12345.wrapper&#123;display: grid;grid-template-columns: 100px 100px 200px;grid-template-rows: 50px 50px;&#125; 放置items 给每个items(Child Element)加上class示例： 12345678&lt;div class="wrapper"&gt;&lt;div class="item1"&gt;1&lt;/div&gt;&lt;div class="item2"&gt;2&lt;/div&gt;&lt;div class="item3"&gt;3&lt;/div&gt;&lt;div class="item4"&gt;4&lt;/div&gt;&lt;div class="item5"&gt;5&lt;/div&gt;&lt;div class="item6"&gt;6&lt;/div&gt;&lt;/div&gt; 创建一个3*2的grid布局： 12345.wrapper&#123;display: grid;grid-template-columns: 100px 100px 100px;grid-template-rows: 100px 100px;&#125; 要定位和调整items(Child Element)，需要使用到grid-column 和 grid-row示例： 1234.item1&#123;grid-column-start: 1;grid-column-end: 4;&#125; item1从第一条网格线开始到第四条网格线结束，将独占一行 网格线图： 简写方法: 123.item1&#123;grid-column: 1 / 4;&#125; 重新排列其它items元素： 123456789101112.item1 &#123;grid-column-start: 1;grid-column-end: 3;&#125;.item3 &#123;grid-row-start: 2;grid-row-end: 4;&#125;.item4 &#123;grid-column-start: 2;grid-column-end: 4;&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css grid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F10%2F20%2FMarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[markdown是一种纯文本格式的标记语言，目标是为了实现易读易写。 一、标题语法：123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 二、字体语法：1234**加粗***斜体****斜体加粗***~~删除线~~ 示例：加粗斜体斜体加粗删除线 三、引用语法：123&gt;引用&gt;&gt;引用嵌套&gt;&gt;&gt;引用嵌套 示例： 引用 引用嵌套 引用嵌套 四、分割线语法：12***--- 示例： 五、图片语法：1![图片alt](图片地址 "图片title") 示例： 六、超链接语法：1[超链接名](超链接地址 "超链接title") 示例：Ronie’s Blog 七、列表语法： 无序列表： 123* 列表一- 列表二+ 列表三 有序列表： 1231. 列表12. 列表23. 列表3 列表嵌套 12345678* 列表一 1. 列表1 2. 列表2 3. 列表3* 列表二 * 列表一 * 列表二 * 列表三 示例： 列表一 列表二 列表三 列表1 列表2 列表3 列表一 列表1 列表2 列表3 列表二 列表一 列表二 列表三八、表格语法：12345| 表头 | 表头 | 表头 || - | :-: | -: || 内容 | 内容 | 内容 || 内容 | 内容 | 内容 || 内容 |内容 | 内容 | 示例： 表头 表头 表头 内容 内容 内容 内容 内容 内容 内容 内容 内容 九、代码语法： 单行代码; 1`代码内容` 代码块 12345(```language) 代码。。。 代码。。。 代码。。。(```) 示例： 代码123代码。。。代码。。。代码。。。]]></content>
      <categories>
        <category>grammar</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
